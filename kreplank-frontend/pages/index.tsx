import { Button } from '@mui/material'
import { NextPage } from 'next'
import Head from 'next/head'
import { useRouter } from 'next/router'
import { NextRequest, NextResponse } from 'next/server'
import { useEffect } from 'react'
import { backendUrlStorage } from '../src/features/config'


export type KerplankEnv = {
  BACKEND_SERVER_URL: string,
}


export type SsrProps = {
  runtimeVariables: KerplankEnv
}

const Home: NextPage<SsrProps> = (ssr) => {

  useEffect(() => {
    backendUrlStorage.set(ssr.runtimeVariables.BACKEND_SERVER_URL)
  }, [])

  const router = useRouter()

  return (
    <div >
      <Head>
        <title>KERPLANK</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main >
        KERPLANK
        <Button onClick={() => router.push('/login')}>
          login
        </Button>
      </main>

    </div>
  )
}



export async function getServerSideProps(context: { req: NextRequest, res: NextResponse }) {
  // ######################### DOWNLOADING LIST OF NUMBER #########################
  // const data = await fetch('http://www.randomnumberapi.com/api/v1.0/random?min=100&max=1000&count=5')
  //   .then(r => r.json() as Promise<number[]>)

  // ######################### BACKEND_LOGIN_SERVER_URL  #########################
  const env = process.env
  const requiredVariables = ['BACKEND_SERVER_URL'] // ['APP_ID', 'APP_SECRET', 'JWT_SECRET', 'BACKEND_LOGIN_SERVER_URL']

  const variables = Object.entries(env).filter((v) => requiredVariables.some(i => i == v[0]))
  if (variables.some((k, v) => v == null) && variables.length == requiredVariables.length)
    throw new Error(`Missing ENVIRONMENT_VARIABLE, Declare all of [${requiredVariables.join(' ')}] values in .env `)

  return { props: { runtimeVariables: Object.fromEntries(variables) as KerplankEnv } as SsrProps }
}


export default Home